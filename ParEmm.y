-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParEmm
  ( happyError
  , myLexer
  , pProgram
  ) where

import Prelude

import qualified AbsEmm
import LexEmm

}

%name pProgram Program
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '!' { PT _ (TS _ 1) }
  '!=' { PT _ (TS _ 2) }
  '%' { PT _ (TS _ 3) }
  '&' { PT _ (TS _ 4) }
  '&&' { PT _ (TS _ 5) }
  '(' { PT _ (TS _ 6) }
  ')' { PT _ (TS _ 7) }
  '*' { PT _ (TS _ 8) }
  '+' { PT _ (TS _ 9) }
  '++' { PT _ (TS _ 10) }
  ',' { PT _ (TS _ 11) }
  '-' { PT _ (TS _ 12) }
  '--' { PT _ (TS _ 13) }
  '/' { PT _ (TS _ 14) }
  ';' { PT _ (TS _ 15) }
  '<' { PT _ (TS _ 16) }
  '<=' { PT _ (TS _ 17) }
  '=' { PT _ (TS _ 18) }
  '==' { PT _ (TS _ 19) }
  '>' { PT _ (TS _ 20) }
  '>=' { PT _ (TS _ 21) }
  '[' { PT _ (TS _ 22) }
  ']' { PT _ (TS _ 23) }
  'bool' { PT _ (TS _ 24) }
  'break' { PT _ (TS _ 25) }
  'continue' { PT _ (TS _ 26) }
  'else' { PT _ (TS _ 27) }
  'false' { PT _ (TS _ 28) }
  'if' { PT _ (TS _ 29) }
  'int' { PT _ (TS _ 30) }
  'return' { PT _ (TS _ 31) }
  'string' { PT _ (TS _ 32) }
  'true' { PT _ (TS _ 33) }
  'void' { PT _ (TS _ 34) }
  'while' { PT _ (TS _ 35) }
  '{' { PT _ (TS _ 36) }
  '||' { PT _ (TS _ 37) }
  '}' { PT _ (TS _ 38) }
  L_Ident  { PT _ (TV $$) }
  L_integ  { PT _ (TI $$) }
  L_quoted { PT _ (TL $$) }

%%

Ident :: { AbsEmm.Ident }
Ident  : L_Ident { AbsEmm.Ident $1 }

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

String  :: { String }
String   : L_quoted { $1 }

Program :: { AbsEmm.Program }
Program : ListTopDef { AbsEmm.Program $1 }

TopDef :: { AbsEmm.TopDef }
TopDef : Decl { AbsEmm.TopDef $1 }

ListTopDef :: { [AbsEmm.TopDef] }
ListTopDef : TopDef { (:[]) $1 } | TopDef ListTopDef { (:) $1 $2 }

Decl :: { AbsEmm.Decl }
Decl : Type ListItem ';' { AbsEmm.Decl $1 $2 }
     | Type Ident '(' ListArg ')' Block { AbsEmm.FnDecl $1 $2 $4 $6 }

Arg :: { AbsEmm.Arg }
Arg : Type Ident { AbsEmm.Arg $1 $2 }
    | Type '&' Ident { AbsEmm.ArgRef $1 $3 }

ListArg :: { [AbsEmm.Arg] }
ListArg : {- empty -} { [] }
        | Arg { (:[]) $1 }
        | Arg ',' ListArg { (:) $1 $3 }

Item :: { AbsEmm.Item }
Item : Ident { AbsEmm.NoInit $1 }
     | Ident '=' Expr { AbsEmm.Init $1 $3 }
     | Ident '[' Expr ']' { AbsEmm.Array $1 $3 }

ListItem :: { [AbsEmm.Item] }
ListItem : Item { (:[]) $1 } | Item ',' ListItem { (:) $1 $3 }

Block :: { AbsEmm.Block }
Block : '{' ListStmt '}' { AbsEmm.Block $2 }

ListStmt :: { [AbsEmm.Stmt] }
ListStmt : {- empty -} { [] } | Stmt ListStmt { (:) $1 $2 }

Stmt :: { AbsEmm.Stmt }
Stmt : ';' { AbsEmm.Empty }
     | Block { AbsEmm.BStmt $1 }
     | Decl { AbsEmm.SDecl $1 }
     | Ident '=' Expr ';' { AbsEmm.Ass $1 $3 }
     | Ident '[' Expr ']' '=' Expr ';' { AbsEmm.AssArr $1 $3 $6 }
     | Ident '++' ';' { AbsEmm.Incr $1 }
     | Ident '[' Expr ']' '++' ';' { AbsEmm.IncrArr $1 $3 }
     | Ident '--' ';' { AbsEmm.Decr $1 }
     | Ident '[' Expr ']' '--' ';' { AbsEmm.DecrArr $1 $3 }
     | 'return' Expr ';' { AbsEmm.Ret $2 }
     | 'return' ';' { AbsEmm.VRet }
     | 'if' '(' Expr ')' Stmt { AbsEmm.Cond $3 $5 }
     | 'if' '(' Expr ')' Stmt 'else' Stmt { AbsEmm.CondElse $3 $5 $7 }
     | 'while' '(' Expr ')' Stmt { AbsEmm.While $3 $5 }
     | 'break' ';' { AbsEmm.Brk }
     | 'continue' ';' { AbsEmm.Cnt }
     | Expr ';' { AbsEmm.SExp $1 }

Type :: { AbsEmm.Type }
Type : 'int' { AbsEmm.Int }
     | 'string' { AbsEmm.Str }
     | 'bool' { AbsEmm.Bool }
     | 'void' { AbsEmm.Void }

ListType :: { [AbsEmm.Type] }
ListType : {- empty -} { [] }
         | Type { (:[]) $1 }
         | Type ',' ListType { (:) $1 $3 }

Expr6 :: { AbsEmm.Expr }
Expr6 : Ident '[' Expr ']' { AbsEmm.EArr $1 $3 }
      | Ident { AbsEmm.EVar $1 }
      | Integer { AbsEmm.ELitInt $1 }
      | 'true' { AbsEmm.ELitTrue }
      | 'false' { AbsEmm.ELitFalse }
      | Ident '(' ListExpr ')' { AbsEmm.EApp $1 $3 }
      | String { AbsEmm.EString $1 }
      | '(' Expr ')' { $2 }

Expr5 :: { AbsEmm.Expr }
Expr5 : '-' Expr6 { AbsEmm.Neg $2 }
      | '!' Expr6 { AbsEmm.Not $2 }
      | Expr6 { $1 }

Expr4 :: { AbsEmm.Expr }
Expr4 : Expr4 MulOp Expr5 { AbsEmm.EMul $1 $2 $3 } | Expr5 { $1 }

Expr3 :: { AbsEmm.Expr }
Expr3 : Expr3 AddOp Expr4 { AbsEmm.EAdd $1 $2 $3 } | Expr4 { $1 }

Expr2 :: { AbsEmm.Expr }
Expr2 : Expr2 RelOp Expr3 { AbsEmm.ERel $1 $2 $3 } | Expr3 { $1 }

Expr1 :: { AbsEmm.Expr }
Expr1 : Expr2 '&&' Expr1 { AbsEmm.EAnd $1 $3 } | Expr2 { $1 }

Expr :: { AbsEmm.Expr }
Expr : Expr1 '||' Expr { AbsEmm.EOr $1 $3 } | Expr1 { $1 }

ListExpr :: { [AbsEmm.Expr] }
ListExpr : {- empty -} { [] }
         | Expr { (:[]) $1 }
         | Expr ',' ListExpr { (:) $1 $3 }

AddOp :: { AbsEmm.AddOp }
AddOp : '+' { AbsEmm.Plus } | '-' { AbsEmm.Minus }

MulOp :: { AbsEmm.MulOp }
MulOp : '*' { AbsEmm.Times }
      | '/' { AbsEmm.Div }
      | '%' { AbsEmm.Mod }

RelOp :: { AbsEmm.RelOp }
RelOp : '<' { AbsEmm.LTH }
      | '<=' { AbsEmm.LE }
      | '>' { AbsEmm.GTH }
      | '>=' { AbsEmm.GE }
      | '==' { AbsEmm.EQU }
      | '!=' { AbsEmm.NE }
{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

