-- Haskell module generated by the BNF converter

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelEmm where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsEmm

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsEmm.Ident -> Result
transIdent x = case x of
  AbsEmm.Ident string -> failure x

transProgram :: Show a => AbsEmm.Program' a -> Result
transProgram x = case x of
  AbsEmm.Program _ topdefs -> failure x

transTopDef :: Show a => AbsEmm.TopDef' a -> Result
transTopDef x = case x of
  AbsEmm.TopDef _ decl -> failure x

transDecl :: Show a => AbsEmm.Decl' a -> Result
transDecl x = case x of
  AbsEmm.Decl _ type_ items -> failure x
  AbsEmm.FnDecl _ type_ ident args block -> failure x

transArg :: Show a => AbsEmm.Arg' a -> Result
transArg x = case x of
  AbsEmm.Arg _ type_ ident -> failure x
  AbsEmm.ArgRef _ type_ ident -> failure x

transItem :: Show a => AbsEmm.Item' a -> Result
transItem x = case x of
  AbsEmm.NoInit _ ident -> failure x
  AbsEmm.Init _ ident expr -> failure x
  AbsEmm.Array _ ident expr -> failure x

transBlock :: Show a => AbsEmm.Block' a -> Result
transBlock x = case x of
  AbsEmm.Block _ stmts -> failure x

transStmt :: Show a => AbsEmm.Stmt' a -> Result
transStmt x = case x of
  AbsEmm.Empty _ -> failure x
  AbsEmm.BStmt _ block -> failure x
  AbsEmm.SDecl _ decl -> failure x
  AbsEmm.Ass _ ident expr -> failure x
  AbsEmm.AssArr _ ident expr1 expr2 -> failure x
  AbsEmm.Incr _ ident -> failure x
  AbsEmm.IncrArr _ ident expr -> failure x
  AbsEmm.Decr _ ident -> failure x
  AbsEmm.DecrArr _ ident expr -> failure x
  AbsEmm.Ret _ expr -> failure x
  AbsEmm.VRet _ -> failure x
  AbsEmm.Cond _ expr stmt -> failure x
  AbsEmm.CondElse _ expr stmt1 stmt2 -> failure x
  AbsEmm.While _ expr stmt -> failure x
  AbsEmm.Brk _ -> failure x
  AbsEmm.Cnt _ -> failure x
  AbsEmm.SExp _ expr -> failure x

transType :: Show a => AbsEmm.Type' a -> Result
transType x = case x of
  AbsEmm.Int _ -> failure x
  AbsEmm.Str _ -> failure x
  AbsEmm.Bool _ -> failure x
  AbsEmm.Void _ -> failure x
  AbsEmm.Fun _ type_ types -> failure x

transExpr :: Show a => AbsEmm.Expr' a -> Result
transExpr x = case x of
  AbsEmm.EArr _ ident expr -> failure x
  AbsEmm.EVar _ ident -> failure x
  AbsEmm.ELitInt _ integer -> failure x
  AbsEmm.ELitTrue _ -> failure x
  AbsEmm.ELitFalse _ -> failure x
  AbsEmm.EApp _ ident exprs -> failure x
  AbsEmm.EString _ string -> failure x
  AbsEmm.Neg _ expr -> failure x
  AbsEmm.Not _ expr -> failure x
  AbsEmm.EMul _ expr1 mulop expr2 -> failure x
  AbsEmm.EAdd _ expr1 addop expr2 -> failure x
  AbsEmm.ERel _ expr1 relop expr2 -> failure x
  AbsEmm.EAnd _ expr1 expr2 -> failure x
  AbsEmm.EOr _ expr1 expr2 -> failure x

transAddOp :: Show a => AbsEmm.AddOp' a -> Result
transAddOp x = case x of
  AbsEmm.Plus _ -> failure x
  AbsEmm.Minus _ -> failure x

transMulOp :: Show a => AbsEmm.MulOp' a -> Result
transMulOp x = case x of
  AbsEmm.Times _ -> failure x
  AbsEmm.Div _ -> failure x
  AbsEmm.Mod _ -> failure x

transRelOp :: Show a => AbsEmm.RelOp' a -> Result
transRelOp x = case x of
  AbsEmm.LTH _ -> failure x
  AbsEmm.LE _ -> failure x
  AbsEmm.GTH _ -> failure x
  AbsEmm.GE _ -> failure x
  AbsEmm.EQU _ -> failure x
  AbsEmm.NE _ -> failure x
